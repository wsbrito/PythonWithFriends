swagger: "2.0"
info:
  description: Este é o arquivo SWAGGER do projeto Python With Friends
  version: "1.0.0"
  title: Swagger Rest - Python With Friends
consumes:
  - application/json
produces:
  - application/json

basePath: /api

# Paths supported by the server application
paths:
  /carro:
    get:
      operationId: classes.controller.MainController.listar_carros
      tags:
        - Carro
      summary: Método para listar todos os carros do sistema.
      description: Método para listar todos os carros do sistema.
      parameters: []
      responses:
        200:
          description: Lista de carros recuperada com sucesso.
    post:
      operationId: classes.controller.MainController.inserir_carro
      tags:
        - Carro
      summary: Método para inclusão de um novo carro no sistema
      description: Os dados deverão ser passados no corpo no POST.
      parameters:
        - name: carro
          in: body
          description: Carro para ser incluído
          required: True
          schema:
            type: object
            properties:
              placa:
                type: string
                description: Placa do carro
              cor:
                type: string
                description: Cor do caro
              qtde_portas:
                type: integer
                description: Quantidade de portas do carro
              ano_fabricacao:
                type: integer
                description: Ano de fabricação do carro
              quilometragem:
                type: integer
                description: Quilometragem do carro
              valor_diaria:
                type: number
                description: Valor da diária do carro
      responses:
        201:
          description: Carro inserido com sucesso
    put:
      operationId: classes.controller.MainController.atualizar_carro
      tags:
        - Carro
      summary: Método para atualizar os dados do carro no sistema.
      description: Método para atualizar os dados do carro no sistema.
      parameters: []
      responses:
        201:
          description: Carro atualizado com sucesso.
  /carro/{id}:
    get:
      operationId: classes.controller.MainController.get_carro
      tags:
        - Carro
      summary: Método para recuperar os dados do carro.
      description: Método para recuperar os dados do carro.
      parameters:
        - name: id
          in: path
          description: Id do carro no sistema.
          type: number
          required: True
      responses:
        200:
          description: Carro recuperado com sucesso.
    delete:
      operationId: classes.controller.MainController.deletar_carro
      tags:
        - Carro
      summary: Método para excluir os dados do carro.
      description: Método para excluir os dados do carro.
      parameters:
        - name: id
          in: path
          description: Id do carro no sistema.
          type: number
          required: True
      responses:
        201:
          description: Carro excluído com sucesso.
  /carro/disponiveis:
    get:
      operationId: classes.controller.MainController.listar_carros_disponiveis
      tags:
        - Carro
      summary: Método para recuperar os dados disponíveis para locação.
      description: Método para recuperar os dados disponíveis para locação.
      parameters: []
      responses:
        200:
          description: Lista de carros recuperada com sucesso.
  /cliente:
    get:
      operationId: classes.controller.MainController.listar_clientes
      tags:
        - Cliente
      summary: Método para recuperar os clientes cadastrados no sistema.
      description: Método para recuperar os clientes cadastrados no sistema.
      parameters: []
      responses:
        200:
          description: Lista de clientes recuperada com sucesso.
    post:
      operationId: classes.controller.MainController.incluir_cliente
      tags:
        - Cliente
      summary: Método para incluir um cliente sistema.
      description: Método para incluir um cliente sistema.
      parameters: []
      responses:
        201:
          description: Cliente incluído com sucesso.
    put:
      operationId: classes.controller.MainController.atualizar_cliente
      tags:
        - Cliente
      summary: Método para atualizar os dados do cliente no sistema.
      description: Método para atualizar os dados do cliente no sistema.
      parameters: []
      responses:
        201:
          description: Cliente atualizado com sucesso.
  /cliente/{id}:
    get:
      operationId: classes.controller.MainController.get_cliente
      tags:
        - Cliente
      summary: Método para recuperar os dados do cliente do id passado como parâmetro.
      description: Método para recuperar os dados do cliente do id passado como parâmetro.
      parameters:
        - name: id
          in: path
          description: Id do cliente no sistema.
          type: number
          required: True
      responses:
        200:
          description: Cliente recuperado com sucesso.
    delete:
      operationId: classes.controller.MainController.excluir_cliente
      tags:
        - Cliente
      summary: Método para excluir os dados do cliente.
      description: Método para excluir os dados do cliente.
      parameters:
        - name: id
          in: path
          description: Id do cliente no sistema.
          type: number
          required: True
      responses:
        201:
          description: Cliente excluído com sucesso.
  /locacao:
    post:
      operationId: classes.controller.MainController.incluir_locacao
      tags:
        - Locação
      summary: Método para incluir uma locação no sistema.
      description: Método para incluir uma locação no sistema.
      parameters: []
      responses:
        201:
          description: Locação incluída com sucesso.
    put:
      operationId: classes.controller.MainController.atualizar_locacao
      tags:
        - Locação
      summary: Método para atualizar a locação no sistema.
      description: Método para atualizar a locação no sistema para a operação de devolução recomenda-se a execução do método calcular locação para evitar falhas na operação.
      parameters: []
      responses:
        201:
          description: Locação atualizada com sucesso.
  /locacao/{id}:
    get:
      operationId: classes.controller.MainController.get_locacao_por_id
      tags:
        - Locação
      summary: Método para recuperar a locação do id passado como parâmetro.
      description: Método para recuperar a locação do id passado como parâmetro.
      parameters:
        - name: id
          in: path
          description: Id da locação no sistema.
          type: number
          required: True
      responses:
        200:
          description: Locação recuperada com sucesso.
  /locacao/calculo/{id}:
    get:
      operationId: classes.controller.MainController.calcular_locacao
      tags:
        - Locação
      summary: Método para calcular a locação.
      description: Método para calcular a locação.
      parameters:
        - name: id
          in: path
          description: Id da locação no sistema.
          type: number
          required: True
      responses:
        200:
          description: Locação calculada com sucesso.
  /locacao/cpf-placa/{cpf_placa}:
    get:
      operationId: classes.controller.MainController.get_locacao_por_cpf_ou_placa
      tags:
        - Locação
      summary: Método para recuperar a locação pelo CPF do cliente ou PLACA do carro.
      description: Método para recuperar a locação pelo CPF do cliente ou PLACA do carro.
      parameters:
        - name: cpf_placa
          in: path
          description: CPF do cliente ou PLACA do carro.
          type: string
          required: True
      responses:
        200:
          description: Locação recuperada com sucesso.
